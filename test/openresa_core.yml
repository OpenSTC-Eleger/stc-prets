-
  to test Resa module, i try user input controls, onchange functions, automated data creation, workflow steps
-
  i delete data accidently created before
-
  To test Resa module, i create first data tests
-
  user init (internal claimer, manager will be admin)
-
  !record {model: openstc.service, id: openresa_tests_service_voirie, view: false}:
    name: Vie associative YAML Tests
    code: YAML_VIE_ASSO
-
  !record {model: openstc.service, id: openresa_tests_service_rh, view: false}:
    name: Ressources humaines YAML Tests
    code: YAML_RH
-
  (test to move to Openbase) Check if partner is created and linked with service_id
-
  !assert {model: openstc.service, id: openresa_tests_service_voirie, severity: error, string: service is not correctly linked with a partner}: 
    - partner_id is not False
    - partner_id.is_department is True
-
  I create internal claimer user
-
  !record {model: res.users, id: openstc_prets_tests_user1, view: false}:
    name: User1 Tests
    login: test1
    new_password: test1
    service_id: openresa_tests_service_voirie
    groups_id: 
      - openresa.group_openresa_internal_claimer
-
  I create manager user
-
  !record {model: res.users, id: openstc_prets_tests_user2, view: false}:
    name: User2 Manager Tests
    login: mana1
    new_password: mana1
    service_id: openresa_tests_service_voirie
    groups_id: 
      - hotel.group_hotel_manager

-
  I create external claimer user
-
  !record {model: res.users, id: openresa_tests_user3, view: False}:
    name: User3 Tests
    login: test3
    new_password: test3
    groups_id: 
      - group_openresa_external_claimer

-
  (test to move to Openbase) Check if user is correctly linked with partner of his service_id
-
  !assert {model: res.users, id: openstc_prets_tests_user1, severity: error, string: User not correctly linked with his service_id partner}:
  - service_id.partner_id.id in [c.partner_id.id for c in contact_id]

-
  (test to move to Openbase) check claimer has only access to its own partner, and manager has access to all claimer of bookings
-
  !python {model: res.users}: |
    user_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'openresa', 'openstc_prets_tests_user1')[1]
    mana_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'openresa', 'openstc_prets_tests_user2')[1]
    user = self.browse(cr, uid, user_id)
    ret = self.pool.get('res.partner').search(cr, user_id, [])
    assert len(ret) == 1, 'internal claimer gets more partner than expected'
    assert ret[0] in [c.partner_id.id for c in user.contact_id] , 'internal claimer gets more partner than expected'
    ret = self.pool.get('res.partner').search(cr, user_id, [])
    assert ret > 1, 'Manager has no full access on claimer bookings (parts of res.partner)'
-
  Partners init (asso) and its own address
-
  Partner 1
-
  !record {model: res.partner, id: openstc_prets_tests_partner1, view: false}:
    name: Association 1
    type_id: openbase.openstc_prets_partner_type_asso
    customer: True
-
  Partner 2
-
  !record {model: res.partner, id: openstc_prets_tests_partner2, view: false}:
    name: Association 2
    type_id: openbase.openstc_prets_partner_type_asso
    customer: True
-
  Partner 1 address
-
  !record {model: res.partner.address, id: openstc_prets_tests_partner1_address1, view: false}:
    name: Asso1 contact1
    partner_id: openstc_prets_tests_partner1
    email: bruno.plancher@siclic.fr
-
  Partner 2 address (link user3 with it)
-
  !record {model: res.partner.address, id: openstc_prets_tests_partner2_address1, view: false}:
    name: Asso2 contact1
    partner_id: openstc_prets_tests_partner2
    email: bruno.plancher@siclic.fr
    user_id: openresa_tests_user3
-
  Start of the tests
-
  First, I test creating resa for citizen (no partner supplied)
-
  !record {model: hotel.reservation, id: openstc_prets_tests_resa_remove_1, forcecreate: true, view: False}:
    name: Reservation 1
    checkin: "2013-06-01 08:00:00"
    checkout: "2013-06-02 10:00:00"
    is_citizen: True
    partner_mail: bruno.plancer@siclic.fr
-
  pricelist_id must be set as well as partner and partner_address
-
  !assert {model: hotel.reservation, id: openstc_prets_tests_resa_remove_1, severity: error, string: "citizen default partner is not correctly set, check override of create method"}:
    - partner_id.id == ref('openresa.openresa_partner_part')
    - pricelist_id is not False
-
  Then, I test creating resa for non-citizen claimer without address
-
  !record {model: hotel.reservation, id: openstc_prets_tests_resa_remove_2, forcecreate: true, view: False}:
    name: Reservation 1
    checkin: "2013-06-01 08:00:00"
    checkout: "2013-06-02 10:00:00"
    partner_id: openstc_prets_tests_partner1
    partner_mail: bruno.plancer@siclic.fr
-
  partner_address (from partner_id) should be set
-
  !assert {model: hotel.reservation, id: openstc_prets_tests_resa_remove_2, severity: error, string: "default partner_address is not correctly set, please check override of create method" }:
    - partner_order_id.id == ref('openresa.openstc_prets_tests_partner1_address1')
    - partner_invoice_id.id == ref('openresa.openstc_prets_tests_partner1_address1')
    - partner_shipping_id.id == ref('openresa.openstc_prets_tests_partner1_address1')
    - pricelist_id is not False
-
  creating resa used for this test session
    