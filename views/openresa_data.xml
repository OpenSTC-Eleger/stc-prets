<?xml version="1.0" encoding="utf-8"?>
<!--
    OpenSTC Interventions - Openerp Module to manage Cityhall technical department
    Copyright (C) 2013 Siclic www.siclic.fr

    This file is part of OpenSTC Interventions.

    OpenSTC Interventions is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    OpenSTC Interventions is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with OpenSTC Interventions.  If not, see <http://www.gnu.org/licenses/>.
-->
<openerp>
	<data noupdate="0">

	    <record id="sequence_resa_number_type" model="ir.sequence.type">
            <field name="name">Type de Numéro de Réservation</field>
            <field name="code">resa.number</field>
        </record>
        <record id="sequence_resa_number" model="ir.sequence">
            <field name="name">Numéro de Réservation</field>
            <field name="code">resa.number</field>
            <field name="prefix">R-%(year)s-</field>
            <field name="padding" eval="4"/>
        </record>

	    <record id="sequence_recur_number_type" model="ir.sequence.type">
            <field name="name">Type de Numéro de Récurrence</field>
            <field name="code">recur.number</field>
        </record>
        <record id="sequence_recur_number" model="ir.sequence">
            <field name="name">Numéro de Récurrence</field>
            <field name="code">recur.number</field>
            <field name="prefix">REC-%(year)s-</field>
            <field name="padding" eval="3"/>
        </record>



	<!-- Data for Reservation uom -->
	<record id="openstc_pret_uom_categ_resa" model="product.uom.categ">
	    <field name="name">Temporel</field>
	</record>

	<record id="openstc_pret_uom_day" model="product.uom">
	    <field name="name">Day (Reservation)</field>
	    <field name="category_id" eval="openstc_pret_uom_categ_resa"/>
	    <field name="factor">1.0</field>
	    <field name="rounding">0.01</field>
	</record>
	<record id="openstc_pret_uom_half_day" model="product.uom">
	    <field name="name">Half-Day (Reservation)</field>
	    <field name="category_id" eval="openstc_pret_uom_categ_resa"/>
		<field name="uom_type">smaller</field>
		<field name="factor">2.0</field>
	    <field name="rounding">0.01</field>

	</record>
	<record id="openstc_pret_uom_hour" model="product.uom">
	    <field name="name">Hour (Reservation)</field>
	    <field name="category_id" eval="openstc_pret_uom_categ_resa"/>
	    <field name="uom_type">smaller</field>
	    <field name="factor">24.0</field>
	    <field name="rounding">0.01</field>
	</record>

	    <record id="openstc_pret_email_template_resa_validee" model="email.template">
	        <field name="name">Réservation Validée</field>
	        <field name="model_id" ref="model_hotel_reservation"/>
	    	<field name="email_from">${object.shop_id.company_id.partner_id.address[0].email or 'bruno.plancher@siclic.fr'}</field>
			<field name="email_to">${object.partner_mail or ''}</field>
			<field name="subject">Votre Réservation: ${object.name or 'inconnu'} est validée</field>
			<field name="body_html"><![CDATA[
	<h2>Madame, Monsieur,</h2>

	<p>Nous vous confirmons la réservation de : </p>
	<%
	from datetime import datetime
	import pytz
	resas = []
	if object.recurrence_id:
		for resa in object.recurrence_id.reservation_ids:
			resas.append(resa)
		endfor
	else:
		resas = [object]
	endif%>
	<ul>
	% for line in object.reservation_line:
	<li>
	<%
	qtity = 0
	if line.qte_reserves > 0 :
		qtity = int(line.qte_reserves)
	endif%>
	${line.reserve_product.name or ''} : ${qtity}
	</li>
	% endfor
	</ul>
	</li>
	<ul>
	% for resa in resas:
	<%
	my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkin_str = my_checkin_str.decode('utf-8')
	my_checkout_str = my_checkout_str.decode('utf-8')
	%>
	<li>du ${my_checkin_str} au ${my_checkout_str}</li>
   % endfor
   </ul>
   </ul>
   <p>afin d'organiser <b> ${object.name or ''} </b></p>
   <p>Nous avons bien pris en considération votre note : <p>
   <p><b> ${object.confirm_note or ''} </b></p>

   <p>Un contrat de location a été envoyé à l’adresse suivante : </br> </br>
   <b> ${object.partner_invoice_id.name  or ''} ${object.partner_invoice_id.street  or ''} ${object.partner_invoice_id.city  or ''} </b>
   </p>

   <p>${object.write_uid.signature or ''}<br />
   ${object.shop_id.company_id.name or ''} </p>

			    ]]></field>
			<field name="body_text"><![CDATA[
			Madame, Monsieur

			Nous vous confirmons la réservation de :
			<%
			from datetime import datetime
			import pytz
			resas = []
			if object.recurrence_id:
				for resa in object.recurrence_id.reservation_ids:
					resas.append(resa)
				endfor
			else:
				resas = [object]
			endif%>

			% for line in object.reservation_line:
			<%
			qtity = 0
			if line.qte_reserves > 0 :
				qtity = int(line.qte_reserves)
			endif%>
			${line.reserve_product.name or ''} : ${qtity}
			% endfor

			% for resa in resas:
			<%
			my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
			my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
			my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
			my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
			my_checkin_str = my_checkin_str.decode('utf-8')
			my_checkout_str = my_checkout_str.decode('utf-8')
			%>
			du ${my_checkin_str} au ${my_checkout_str}
		   % endfor

		    afin d'organiser  ${object.name or ''}
   			Nous avons bien pris en considération votre note : ${object.confirm_note or ''}

   			Un contrat de location a été envoyé à l’adresse suivante :
   			${object.partner_invoice_id.name  or ''} ${object.partner_invoice_id.street  or ''} ${object.partner_invoice_id.city  or ''}

		   ${object.write_uid.signature or ''}
		   ${object.shop_id.company_id.name or ''}

	    ]]></field>
    </record>

	<record id="openstc_pret_email_template_resa_en_attente" model="email.template">
	        <field name="name">Réservation En Attente</field>
	        <field name="model_id" ref="model_hotel_reservation"/>
	    	<field name="email_from">${object.shop_id.company_id.partner_id.address[0].email or 'bruno.plancher@siclic.fr'}</field>
			<field name="email_to">${object.partner_mail or ''}</field>
			<field name="subject">Votre Réservation: ${object.name or 'inconnu'} est en attente de Validation</field>
			<field name="body_html"><![CDATA[
			    <h2>Message Automatique</h2>

			    <p>Votre Réservation a été prise en compte mais est en attente de validation. Vous recevrez une autre notification (à cette même adresse mail) lorsqu'elle aura été traitée. </p>
				<p>Récapitulatif de votre Réservation : </p>
				<ul>
				<li>Libellé : ${object.name or ''}</li>
				<%
				from datetime import datetime
				import pytz
				resas = []
				if object.recurrence_id:
					for resa in object.recurrence_id.reservation_ids:
						resas.append(resa)
					endfor
				else:
					resas = [object]
				endif%>
				<li><u>Personne Responsable : </u>${object.partner_shipping_id.name or ''}</li>
				<li><u>Ressources Réservées :</u>
				<ul>
				% for line in object.reservation_line:
				<li>${line.reserve_product.name or ''} : ${line.qte_reserves or 0}</li>
				% endfor
				</ul>
				</li>
				<li><u>Dates : </u></li>
				<ul>
				% for resa in resas:
				<%
				my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
				my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
				my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
				my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
				my_checkin_str = my_checkin_str.decode('utf-8')
				my_checkout_str = my_checkout_str.decode('utf-8')
				%>
				<li>du ${my_checkin_str} au ${my_checkout_str}<br /></li>
				  % endfor
			  </ul>
			  </ul>
			    <br />
   			    Toutefois, veuillez noter que les ressources que vous avez demandé ne vous sont pas encore acquises pour les dates indiquées, un autre email vous sera envoyé pour vous confirmer votre réservation.
			    <br />
			    <p>Cordialement,</p>
			    <br />
			    <p>${object.shop_id.company_id.name or ''}</p>
			    <br />
			    <img src="data:image/png;base64,${object.shop_id.company_id.logo or ''}"/>
			    <br />
			    <p><i>Selon la loi du 6 janvier 1978 de la Loi Informatique et Libertés, vous disposez d'un droit de regard, de rectification et de suppression sur l'ensemble des informations personnelles vous concernant.</i></p>

			    ]]></field>
			<field name="body_text"><![CDATA[
			    Message Automatique

			    Votre Réservation a été prise en compte mais est en attente de validation. Vous recevrez une autre notification (à cette même adresse mail) lorsqu'elle aura été traitée.
				Récapitulatif de votre Réservation :

				Libellé : ${object.name or ''}
				<%
				from datetime import datetime
				import pytz
				resas = []
				if object.recurrence_id:
					for resa in object.recurrence_id.reservation_ids:
						resas.append(resa)
					endfor
				else:
					resas = [object]
				endif%>
				Personne Responsable : ${object.partner_shipping_id.name or ''}
				Ressources Réservées :

				% for line in object.reservation_line:
				${line.reserve_product.name or ''} : ${line.qte_reserves or 0}
				% endfor

				Dates :
				% for resa in resas:
				<%
				my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
				my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
				my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
				my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
				my_checkin_str = my_checkin_str.decode('utf-8')
				my_checkout_str = my_checkout_str.decode('utf-8')
				%>
				du ${my_checkin_str} au ${my_checkout_str}
				  % endfor

   			    Toutefois, veuillez noter que les ressources que vous avez demandé ne vous sont pas encore acquises pour les dates indiquées, un autre email vous sera envoyé pour vous confirmer votre réservation.

			    Cordialement,

				${object.write_uid.signature }
		   		${object.shop_id.company_id.name or ''}

			    Selon la loi du 6 janvier 1978 de la Loi Informatique et Libertés, vous disposez d'un droit de regard, de rectification et de suppression sur l'ensemble des informations personnelles vous concernant.
		    ]]></field>
    </record>


    <record id="openstc_pret_email_template_resa_done" model="email.template">
	        <field name="name">Réservation Terminée</field>
	        <field name="model_id" ref="model_hotel_reservation"/>
	    	<field name="email_from">${object.shop_id.company_id.partner_id.address[0].email or 'bruno.plancher@siclic.fr'}</field>
			<field name="email_to">${object.partner_mail or ''}</field>
			<field name="subject">Facture concernant votre Réservation: ${object.name or 'inconnu'}</field>
			<field name="body_html"><![CDATA[
	<h2>Madame, Monsieur,</h2>

	<%
	from datetime import datetime
	import pytz

	my_last_checkout = None
	resas = []

	if object.recurrence_id:
		for resa in object.recurrence_id.reservation_ids:
			resas.append(resa)
		endfor
	else:
		resas = [object]
	%>

	% for resa in resas:
	<%
		my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
		my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
		if my_last_checkout == None:
			my_last_checkout = my_checkout
		if my_checkout > my_last_checkout:
			my_last_checkout = my_checkout


		my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
		my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
		my_last_checkout_str = my_last_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))

		my_checkin_str = my_checkin_str.decode('utf-8')
		my_checkout_str = my_checkout_str.decode('utf-8')
		my_last_checkout_str = my_last_checkout_str.decode('utf-8')


	%>
	% endfor

	<p>Suite à l'événement <b>${object.name}</b> qui s'est tenu du ${my_checkin_str} au ${my_last_checkout_str}, nous avons procédé à un état des lieux. Le résultat est le suivant : </br></br>
	<b>${object.done_note or ''}</b>.</br></br>

	Cette réservation est clôturée.</p>

   <br />
   <p>${object.write_uid.signature or ''} <br />
   ${object.shop_id.company_id.name or ''} </p>

			    ]]></field>
			<field name="body_text"><![CDATA[
	Madame, Monsieur,

	<%
	from datetime import datetime
	import pytz

	my_last_checkout = None
	resas = []

	if object.recurrence_id:
		for resa in object.recurrence_id.reservation_ids:
			resas.append(resa)
		endfor
	else:
		resas = [object]
	%>

	% for resa in resas:
	<%
		my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
		my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
		if my_last_checkout == None:
			my_last_checkout = my_checkout
		if my_checkout > my_last_checkout :
			my_last_checkout = my_checkout

		my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
		my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
		my_last_checkout_str = my_last_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))

		my_checkin_str = my_checkin_str.decode('utf-8')
		my_checkout_str = my_checkout_str.decode('utf-8')
		my_last_checkout_str = my_last_checkout_str.decode('utf-8')
	%>
	% endfor

	Suite à l'événement ${object.name} qui s'est tenu du ${my_checkin_str} au ${my_last_checkout_str}, nous avons procédé à un état des lieux. Le résultat est le suivant :

	${object.done_note or ''}.

	Cette réservation est clôturée.

   ${object.write_uid.signature or ''}
   ]]></field>
    </record>

        <record id="openstc_pret_email_template_resa_cancelled" model="email.template">
	        <field name="name">Réservation annulée</field>
	        <field name="model_id" ref="model_hotel_reservation"/>
	    	<field name="email_from">${object.shop_id.company_id.partner_id.address[0].email or 'bruno.plancher@siclic.fr'}</field>
			<field name="email_to">${object.partner_mail or ''}</field>
			<field name="subject">Votre Réservation: ${object.name or 'inconnu'} a été refusée</field>
			<field name="body_html"><![CDATA[
	<h2>Madame, Monsieur,</h2>
	<ul>
	<p>Nous ne pouvons donner une suite favorable à votre demande de réservation de :</p>
	<%
	from datetime import datetime
	import pytz
	resas = []
	if object.recurrence_id:
		for resa in object.recurrence_id.reservation_ids:
			resas.append(resa)
		endfor
	else:
		resas = [object]
	endif
	%>

	<ul>
	% for line in object.reservation_line:
	<li>${line.reserve_product.name or ''} : ${line.qte_reserves or 0}</li>
	% endfor
	</ul>
	<ul>
	% for resa in resas:
	<%
	my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkin_str = my_checkin_str.decode('utf-8')
	my_checkout_str = my_checkout_str.decode('utf-8')
	%>
	<li>du ${my_checkin_str} au ${my_checkout_str}<br /></li>
   % endfor
   </ul>
   </ul>
	<br />
	<p><b>afin d’organiser ${object.name or 'inconnu'}</b>  en raison de  : </br>
		${object.cancel_note or ''}
	</p>
	<br />
   <p>	   ${object.write_uid.signature or '' }<br />
		   ${object.shop_id.company_id.name or ''} </p>
			    ]]></field>
			<field name="body_text"><![CDATA[
	Madame, Monsieur,

	Nous ne pouvons donner une suite favorable à votre demande de réservation de :
	<%
	from datetime import datetime
	import pytz
	resas = []
	if object.recurrence_id:
		for resa in object.recurrence_id.reservation_ids:
			resas.append(resa)
		endfor
	else:
		resas = [object]
	endif

	%>

	% for line in object.reservation_line:
	${line.reserve_product.name or ''} : ${line.qte_reserves or 0}
	% endfor


	% for resa in resas:
	<%
	my_checkin = datetime.strptime(str(resa.checkin),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkout = datetime.strptime(str(resa.checkout),"%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
	my_checkin_str = my_checkin.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkout_str = my_checkout.astimezone(pytz.timezone("Europe/Paris")).strftime(("%x %Hh%M").encode('utf-8'))
	my_checkin_str = my_checkin_str.decode('utf-8')
	my_checkout_str = my_checkout_str.decode('utf-8')
	%>
	du ${my_checkin_str} au ${my_checkout_str}
   % endfor

	afin d’organiser <b>${object.name or 'inconnu'}  en raison de :
	${object.cancel_note or ''}

	${object.write_uid.signature or ''}
	${object.shop_id.company_id.name or ''}
		    ]]></field>
		</record>
	</data>
	<data>

	 <record model="res.groups" id="hotel.group_hotel_manager">
	     <field name="name">OpenResa /  Réservations / gestionnaire</field>
    	 <field name="implied_ids" eval="[(4,ref('hotel.group_hotel_user'))]"/>
    	 <field name="code">HOTEL_MANA</field>
	 </record>
	 <record model="res.groups" id="hotel.group_hotel_user">
	      <field name="name">OpenResa /  Réservations / agent interne</field>
    	 <field name="code">HOTEL_USER</field>
	 </record>

	 <!-- <delete id="group_hotel_officer" model="res.groups"/>  -->

	 <!--  	<record model="res.groups" id="group_hotel_officer">
	     <field name="name">OpenResa / Réservations / Agent</field>
    	 <field name="code">HOTEL_OFFI</field>
    	 <field name="implied_ids" eval="[(4,ref('hotel.group_hotel_user'))]"/>
	 </record>
	  -->

	<record model="res.groups" id="openresa_api_group">
        <field name="name">API Reservation Group</field>
        <field name="code">APIRESA</field>
        <field name="category_id" ref="base.module_category_project_management"/>
	</record>

	<record model="res.partner" id="openresa_partner_part">
	    <field name="name">Particuliers</field>
	    <field name="type_id" ref="openbase.openstc_prets_partner_type_part"/>
		<field name="customer" eval="True"/>
		<field name="supplier" eval="False"/>
	</record>

	<!-- I create default contact to be able to display res_partner in openerp, and i create it separetly from res_partner
	to be sure that is created only once, and always present -->
	<record model="res.partner.address" id="openresa_partner_contact_default_part">
	    <field name="name"></field>
	    <field name="partner_id" ref="openresa_partner_part"/>
	</record>


    <record model="ir.rule" id="openresa_partner_type_rule">
        <field name="name">Partner Type Rule</field>
        <field name="model_id" ref="openbase.model_openstc_partner_type"/>
        <field name="domain_force">[('code','in',['PARTICULIER','ASSOCIATION'])]</field>
        <field eval="[(6,0,[ref('openresa_api_group')])]" name="groups"/>
        <field eval="1" name="perm_unlink"/>
        <field eval="1" name="perm_write"/>
        <field eval="1" name="perm_read"/>
        <field eval="1" name="perm_create"/>
    </record>


	</data>
</openerp>